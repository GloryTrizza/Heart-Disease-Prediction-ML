# -*- coding: utf-8 -*-
"""Heart Disease Prediction ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E8p7nIJAr9fV5ldWeruCaQvPkr96eMfQ
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""## Data Collection and Processing


"""

# loading the csv data to a pandas dataframe
heart_data = pd.read_csv("/content/heart_disease_data.csv")

#printing the first 5 rows of the dataset
heart_data.head()

# printing the last 5 rows of the dataset
heart_data.tail()

# checking the number of rows and columns in the dataset
heart_data.shape

# more information about the data
heart_data.info()

#checking for any missing values
heart_data.isnull().sum()

# getting the statistical measures about the data
heart_data.describe()

# checking the distribution of target variable(those with heart problem)
heart_data["target"].value_counts()

"""###### 165 people have a heart condition, whereas 138 people do not.

1 --> Defective heart, 
0 --> Healthy heart

## Splitting the features and the target
"""

x = heart_data.drop(columns="target", axis=1)
y = heart_data["target"]

print(x)

print(y)

"""## Splitting the data into training data and test data"""

x_train, x_test, y_train, y_test = train_test_split(x, y,  test_size=0.2,  stratify=y, random_state=2)

print(x.shape, x_train.shape, x_test.shape)

"""## Model Training

### Logistic Regression
"""

model= LogisticRegression()

# training the LogisticRegresson Model with training data
model.fit(x_train, y_train)

"""## Model Evaluation

### Accuracy score
"""

# accuracy on training data
x_train_prediction = model.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction, y_train)

print("Accuracy on training data: ",training_data_accuracy)

# accuracy on test data
x_test_prediction = model.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction, y_test)

print("Accuracy on test data: ",test_data_accuracy)

## Building a predictive system

input_data = (41,0,1,130,204,0,0,172,0,1.4,2,0,2)

# convert the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the numpy array as we are predicting for only one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if prediction[0] == 0:
  print("The person does not have a heart disease.")
else:
  print("The person has a heart disease.")

input_data = (62,0,0,140,268,0,0,160,0,3.6,0,2,2)

# convert the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the numpy array as we are predicting for only one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if prediction[0] == 0:
  print("The person does not have a heart disease.")
else:
  print("The person has a heart disease.")

